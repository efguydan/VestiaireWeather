plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-kapt'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.efedaniel.vestiaireweather"
        minSdk 21
        targetSdk 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    Properties properties = new Properties()
    properties.load(project.rootProject.file("local.properties").newDataInputStream())

    buildTypes {
        debug {
            buildConfigField "String", "API_KEY", properties.getProperty("API_KEY", "")
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_KEY", properties.getProperty("API_KEY", "")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }

}

dependencies {
    // AndroidX
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    /** Lifecycle
     * Lifecycle is used to provide Lifecycle Aware Components such as ViewModel
     */
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0'

    /** Navigation
     * Navigation is used to explicitly define destinations and actions. Destinations are fragments
     * and actions are the navigation between them.
     */
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'

    /** Coroutines
     * Coroutines are used to handle asynchronous Operations
     */
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0'

    /** Material Components
     * Material Components are imported into the app to use into building Material UI. E.g.
     * MaterialTheme, Material Card View, etc.
     */
    implementation 'com.google.android.material:material:1.4.0'

    /** Dagger
     * Dagger is used for Dependency Injection
     */
    implementation 'com.google.dagger:dagger:2.36'
    kapt 'com.google.dagger:dagger-compiler:2.36'
    compileOnly 'org.glassfish:javax.annotation:10.0-b28'

    /** Retrofit
     * Retrofit is used to create a Service to make API calls.
     * Gson Converter is used to serialize Json Data into DTOs
     * The Logging Interceptor is used to log API calls and response data into the logcat
     */
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'

    /** Room
     *  For Persisting Weather Data for offline use.
     */
    implementation 'androidx.room:room-runtime:2.3.0'
    implementation 'androidx.room:room-ktx:2.3.0'
    kapt 'androidx.room:room-compiler:2.3.0'

    /** Testing Libraries
     * Mockito is used to mock Dependencies Behaviours.
     * Coroutines Test is used to create a Dispatcher for Test Purposes.
     */
    testImplementation 'junit:junit:4.+'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:4.0.0'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'org.mockito:mockito-inline:4.0.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.9'
}

apply from: '../spotless.gradle'